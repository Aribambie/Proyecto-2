
Proyecto_Funtime.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cad  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000817  00000000  00000000  000010ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000646  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000491  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000289  00000000  00000000  00002499  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  78:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
	
	return ADCH; 
}


void setup (void){
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	10 82       	st	Z, r1
  86:	80 81       	ld	r24, Z
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	80 83       	st	Z, r24
  8c:	80 81       	ld	r24, Z
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	80 83       	st	Z, r24
  92:	80 81       	ld	r24, Z
  94:	80 62       	ori	r24, 0x20	; 32
  96:	80 83       	st	Z, r24
  98:	ea e7       	ldi	r30, 0x7A	; 122
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
  a4:	80 81       	ld	r24, Z
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	80 83       	st	Z, r24
  aa:	ee e7       	ldi	r30, 0x7E	; 126
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <valorADC>:
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	90 83       	st	Z, r25
  c6:	90 81       	ld	r25, Z
  c8:	89 2b       	or	r24, r25
  ca:	80 83       	st	Z, r24
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
  d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  da:	86 fd       	sbrc	r24, 6
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <valorADC+0x1a>
  de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	08 95       	ret

000000e6 <main>:
}


int main(void)
{  
	initPWM0FastA(0,1024);  
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	74 e0       	ldi	r23, 0x04	; 4
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 cc 00 	call	0x198	; 0x198 <initPWM0FastA>
	initPWM0FastB(0,1024);  
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	74 e0       	ldi	r23, 0x04	; 4
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <initPWM0FastB>
	initPWM1FastA(0,1024);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	74 e0       	ldi	r23, 0x04	; 4
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <initPWM1FastA>
	initPWM1FastB(0,1024);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	74 e0       	ldi	r23, 0x04	; 4
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 1e 01 	call	0x23c	; 0x23c <initPWM1FastB>
	setup();  
	initADC();  
 10e:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
	sei();
 112:	78 94       	sei

	uint16_t dutyCycle1 = valorADC(6);
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	0e 94 5e 00 	call	0xbc	; 0xbc <valorADC>
	uint16_t dutyCycle2 = valorADC(7);
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	0e 94 5e 00 	call	0xbc	; 0xbc <valorADC>
	uint16_t dutyCycle3 = valorADC(5);
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	0e 94 5e 00 	call	0xbc	; 0xbc <valorADC>
	uint16_t dutyCycle4 = valorADC(4);
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	0e 94 5e 00 	call	0xbc	; 0xbc <valorADC>
	
    while (1) 
    {
			//Ojo izquierdo
			dutyCycle1 = valorADC(6);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 5e 00 	call	0xbc	; 0xbc <valorADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	ef e3       	ldi	r30, 0x3F	; 63
 134:	fc e9       	ldi	r31, 0x9C	; 156
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x50>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x56>
 13c:	00 00       	nop
			_delay_ms(10);  
			
			updateDCA(dutyCycle1);
 13e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <updateDCA>

			dutyCycle2 = valorADC(7);
 142:	87 e0       	ldi	r24, 0x07	; 7
 144:	0e 94 5e 00 	call	0xbc	; 0xbc <valorADC>
 148:	ef e3       	ldi	r30, 0x3F	; 63
 14a:	fc e9       	ldi	r31, 0x9C	; 156
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x66>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x6c>
 152:	00 00       	nop
			_delay_ms(10);  
			
			updateDCB(dutyCycle2);
 154:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <updateDCB>
			
			//Ojo derecho 
			dutyCycle3 = valorADC(5);
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	0e 94 5e 00 	call	0xbc	; 0xbc <valorADC>
 15e:	ef e3       	ldi	r30, 0x3F	; 63
 160:	fc e9       	ldi	r31, 0x9C	; 156
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x7c>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x82>
 168:	00 00       	nop
			_delay_ms(10);
			
			updateDCA1(dutyCycle3);
 16a:	0e 94 3c 01 	call	0x278	; 0x278 <updateDCA1>

			dutyCycle4 = valorADC(4);
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	0e 94 5e 00 	call	0xbc	; 0xbc <valorADC>
 174:	ef e3       	ldi	r30, 0x3F	; 63
 176:	fc e9       	ldi	r31, 0x9C	; 156
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x92>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x98>
 17e:	00 00       	nop
			_delay_ms(10);
			
			updateDCB1(dutyCycle4);
 180:	0e 94 42 01 	call	0x284	; 0x284 <updateDCB1>
 184:	ff e7       	ldi	r31, 0x7F	; 127
 186:	28 e3       	ldi	r18, 0x38	; 56
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	f1 50       	subi	r31, 0x01	; 1
 18c:	20 40       	sbci	r18, 0x00	; 0
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0xa4>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0xae>
 194:	00 00       	nop
 196:	ca cf       	rjmp	.-108    	; 0x12c <main+0x46>

00000198 <initPWM0FastA>:
#include "Ojito_L.h" 

void initPWM0FastA(uint8_t inverted, uint16_t precaler){
	DDRD |= (1<<DDD6);  
 198:	9a b1       	in	r25, 0x0a	; 10
 19a:	90 64       	ori	r25, 0x40	; 64
 19c:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0A = 0;  
 19e:	14 bc       	out	0x24, r1	; 36
	if (inverted) {
 1a0:	88 23       	and	r24, r24
 1a2:	21 f0       	breq	.+8      	; 0x1ac <initPWM0FastA+0x14>
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);  
 1a4:	84 b5       	in	r24, 0x24	; 36
 1a6:	80 6c       	ori	r24, 0xC0	; 192
 1a8:	84 bd       	out	0x24, r24	; 36
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <initPWM0FastA+0x1a>
		} else {
		TCCR0A |= (1<<COM0A1);  
 1ac:	84 b5       	in	r24, 0x24	; 36
 1ae:	80 68       	ori	r24, 0x80	; 128
 1b0:	84 bd       	out	0x24, r24	; 36
	}
	
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 1b2:	84 b5       	in	r24, 0x24	; 36
 1b4:	83 60       	ori	r24, 0x03	; 3
 1b6:	84 bd       	out	0x24, r24	; 36
	
	if (precaler == 1024) {
 1b8:	61 15       	cp	r22, r1
 1ba:	74 40       	sbci	r23, 0x04	; 4
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <initPWM0FastA+0x2c>
		TCCR0B |= (1<<CS02)|(1<<CS00);  
 1be:	85 b5       	in	r24, 0x25	; 37
 1c0:	85 60       	ori	r24, 0x05	; 5
 1c2:	85 bd       	out	0x25, r24	; 37
 1c4:	08 95       	ret

000001c6 <initPWM0FastB>:
	}
}

void initPWM0FastB(uint8_t inverted, uint16_t precaler){
	DDRD |= (1<<DDD5);  
 1c6:	9a b1       	in	r25, 0x0a	; 10
 1c8:	90 62       	ori	r25, 0x20	; 32
 1ca:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0B = 0;  
 1cc:	15 bc       	out	0x25, r1	; 37
	if (inverted) {
 1ce:	88 23       	and	r24, r24
 1d0:	21 f0       	breq	.+8      	; 0x1da <initPWM0FastB+0x14>
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);  
 1d2:	84 b5       	in	r24, 0x24	; 36
 1d4:	80 63       	ori	r24, 0x30	; 48
 1d6:	84 bd       	out	0x24, r24	; 36
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <initPWM0FastB+0x1a>
		} else {
		TCCR0A |= (1<<COM0B1);  
 1da:	84 b5       	in	r24, 0x24	; 36
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	84 bd       	out	0x24, r24	; 36
	}
	
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 1e0:	84 b5       	in	r24, 0x24	; 36
 1e2:	83 60       	ori	r24, 0x03	; 3
 1e4:	84 bd       	out	0x24, r24	; 36
	
	TCCR0B |= (1<<CS02)|(1<<CS00);  
 1e6:	85 b5       	in	r24, 0x25	; 37
 1e8:	85 60       	ori	r24, 0x05	; 5
 1ea:	85 bd       	out	0x25, r24	; 37
 1ec:	08 95       	ret

000001ee <updateDCA>:
}

void updateDCA(uint8_t duty){
	OCR0A = duty;  
 1ee:	87 bd       	out	0x27, r24	; 39
 1f0:	08 95       	ret

000001f2 <updateDCB>:
}

void updateDCB(uint8_t duty){
	OCR0B = duty; 
 1f2:	88 bd       	out	0x28, r24	; 40
 1f4:	08 95       	ret

000001f6 <initPWM1FastA>:
#include "Ojito_R.h"

void initPWM1FastA(uint8_t inverted, uint16_t precaler){
	DDRB |= (1<<DDB1); 
 1f6:	94 b1       	in	r25, 0x04	; 4
 1f8:	92 60       	ori	r25, 0x02	; 2
 1fa:	94 b9       	out	0x04, r25	; 4
	
	TCCR1A = 0;  
 1fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	if (inverted) {
 200:	88 23       	and	r24, r24
 202:	31 f0       	breq	.+12     	; 0x210 <initPWM1FastA+0x1a>
		TCCR1A |= (1<<COM1A1)|(1<<COM1A0);  
 204:	e0 e8       	ldi	r30, 0x80	; 128
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	80 6c       	ori	r24, 0xC0	; 192
 20c:	80 83       	st	Z, r24
 20e:	05 c0       	rjmp	.+10     	; 0x21a <initPWM1FastA+0x24>
		} else {
		TCCR1A |= (1<<COM1A1); 
 210:	e0 e8       	ldi	r30, 0x80	; 128
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 68       	ori	r24, 0x80	; 128
 218:	80 83       	st	Z, r24
	}
	
	TCCR1A |= (1<<WGM10); 
 21a:	e0 e8       	ldi	r30, 0x80	; 128
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	81 60       	ori	r24, 0x01	; 1
 222:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);  
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
	
	if (precaler == 1024) {
 22e:	61 15       	cp	r22, r1
 230:	74 40       	sbci	r23, 0x04	; 4
 232:	19 f4       	brne	.+6      	; 0x23a <initPWM1FastA+0x44>
		TCCR1B |= (1<<CS12)|(1<<CS10);  
 234:	80 81       	ld	r24, Z
 236:	85 60       	ori	r24, 0x05	; 5
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <initPWM1FastB>:
	}
}

void initPWM1FastB(uint8_t inverted, uint16_t precaler){
	DDRB |= (1 << DDB2);
 23c:	94 b1       	in	r25, 0x04	; 4
 23e:	94 60       	ori	r25, 0x04	; 4
 240:	94 b9       	out	0x04, r25	; 4
	
	//TCCR1A = 0;  
	if (inverted) {
 242:	88 23       	and	r24, r24
 244:	31 f0       	breq	.+12     	; 0x252 <initPWM1FastB+0x16>
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0);  
 246:	e0 e8       	ldi	r30, 0x80	; 128
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	80 63       	ori	r24, 0x30	; 48
 24e:	80 83       	st	Z, r24
 250:	05 c0       	rjmp	.+10     	; 0x25c <initPWM1FastB+0x20>
		} else {
		TCCR1A |= (1<<COM1B1);  
 252:	e0 e8       	ldi	r30, 0x80	; 128
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	80 83       	st	Z, r24
	}
	
	TCCR1A |= (1<<WGM10);  
 25c:	e0 e8       	ldi	r30, 0x80	; 128
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	81 60       	ori	r24, 0x01	; 1
 264:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);  
 266:	e1 e8       	ldi	r30, 0x81	; 129
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	88 60       	ori	r24, 0x08	; 8
 26e:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<CS12)|(1<<CS10);  
 270:	80 81       	ld	r24, Z
 272:	85 60       	ori	r24, 0x05	; 5
 274:	80 83       	st	Z, r24
 276:	08 95       	ret

00000278 <updateDCA1>:
}


void updateDCA1(uint8_t duty){
	OCR1A = duty;
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 27e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 282:	08 95       	ret

00000284 <updateDCB1>:
}

void updateDCB1(uint8_t duty){
	OCR1B = duty;
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 28a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 28e:	08 95       	ret

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
